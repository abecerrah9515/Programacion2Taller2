package views;

import javax.swing.*;
import org.jdatepicker.impl.*;

import controllers.ConsultarUsuarioController;
import entities.DTO.Usuario;

import java.util.Properties;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class VerUsuarioView extends JFrame {
    // Componentes del formulario
    private JTextField txtIdUsuario, txtDocumento, txtNombres, txtApellidos, txtNumeroHijos, txtCelular, txtCorreo;
    private JComboBox<String> comboTipoDocumento, comboGenero, comboGrupoSang, comboRh, comboEstadoCivil;
    private JButton btnModificar, btnBorrar;
    private JDatePickerImpl datePickerFechaExpedicion;
    private ConsultarUsuarioController _usuariosController;
    private Usuario usuario;  // Objeto Usuario que contiene los datos consultados

    public VerUsuarioView(Usuario usuario) {
        this.usuario = usuario;
        _usuariosController = new ConsultarUsuarioController();

        // Configuración del JFrame
        setTitle("Ver Usuario");
        setSize(500, 700);  // Ajustamos el tamaño para acomodar el DatePicker
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(null);

        // Etiqueta y campo para ID (inhabilitado)
        JLabel lblIdUsuario = new JLabel("ID Usuario:");
        lblIdUsuario.setBounds(30, 30, 150, 25);
        add(lblIdUsuario);

        txtIdUsuario = new JTextField(String.valueOf(usuario.getIdUsuario()));
        txtIdUsuario.setBounds(200, 30, 200, 25);
        txtIdUsuario.setEnabled(false);  // Campo inhabilitado
        add(txtIdUsuario);

        // Rellenar y mostrar los demás campos con los datos del usuario
        JLabel lblTipoDocumento = new JLabel("Tipo de Documento:");
        lblTipoDocumento.setBounds(30, 70, 150, 25);
        add(lblTipoDocumento);

        comboTipoDocumento = new JComboBox<>(new String[]{"Cédula de Ciudadanía", "Tarjeta de Identidad", "Cédula de Extranjería", "Pasaporte"});
        comboTipoDocumento.setBounds(200, 70, 200, 25);
        comboTipoDocumento.setSelectedIndex(usuario.getIdTipoDocumento() - 1);
        add(comboTipoDocumento);

        JLabel lblDocumento = new JLabel("Número de Documento:");
        lblDocumento.setBounds(30, 110, 150, 25);
        add(lblDocumento);

        txtDocumento = new JTextField(String.valueOf(usuario.getDocumento()));
        txtDocumento.setBounds(200, 110, 200, 25);
        add(txtDocumento);

        JLabel lblNombres = new JLabel("Nombres:");
        lblNombres.setBounds(30, 150, 150, 25);
        add(lblNombres);

        txtNombres = new JTextField(usuario.getNombres());
        txtNombres.setBounds(200, 150, 200, 25);
        add(txtNombres);

        JLabel lblApellidos = new JLabel("Apellidos:");
        lblApellidos.setBounds(30, 190, 150, 25);
        add(lblApellidos);

        txtApellidos = new JTextField(usuario.getApellidos());
        txtApellidos.setBounds(200, 190, 200, 25);
        add(txtApellidos);

        JLabel lblNumeroHijos = new JLabel("Número de Hijos:");
        lblNumeroHijos.setBounds(30, 230, 150, 25);
        add(lblNumeroHijos);

        txtNumeroHijos = new JTextField(String.valueOf(usuario.getNumeroHijos()));
        txtNumeroHijos.setBounds(200, 230, 200, 25);
        add(txtNumeroHijos);

        JLabel lblCelular = new JLabel("Celular:");
        lblCelular.setBounds(30, 270, 150, 25);
        add(lblCelular);

        txtCelular = new JTextField(usuario.getCelular());
        txtCelular.setBounds(200, 270, 200, 25);
        add(txtCelular);

        JLabel lblCorreo = new JLabel("Correo Electrónico:");
        lblCorreo.setBounds(30, 310, 150, 25);
        add(lblCorreo);

        txtCorreo = new JTextField(usuario.getCorreoElectronico());
        txtCorreo.setBounds(200, 310, 200, 25);
        add(txtCorreo);

        // Etiqueta y DatePicker para Fecha de Expedición
        JLabel lblFechaExpedicion = new JLabel("Fecha de Expedición:");
        lblFechaExpedicion.setBounds(30, 350, 150, 25);
        add(lblFechaExpedicion);

        // Configuración del DatePicker
        UtilDateModel model = new UtilDateModel(usuario.getFechaExpedicion());
        Properties p = new Properties();
        p.put("text.today", "Hoy");
        p.put("text.month", "Mes");
        p.put("text.year", "Año");
        JDatePanelImpl datePanel = new JDatePanelImpl(model, p);
        datePickerFechaExpedicion = new JDatePickerImpl(datePanel, new DateLabelFormatter());
        datePickerFechaExpedicion.setBounds(200, 350, 200, 25);
        add(datePickerFechaExpedicion);

        // Botón Modificar
        btnModificar = new JButton("Modificar");
        btnModificar.setBounds(100, 570, 100, 30);
        add(btnModificar);

        // Botón Borrar
        btnBorrar = new JButton("Borrar");
        btnBorrar.setBounds(250, 570, 100, 30);
        add(btnBorrar);

        // Acción al hacer clic en "Modificar"
        btnModificar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                modificarUsuario();
            }
        });

        // Acción al hacer clic en "Borrar"
        btnBorrar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                borrarUsuario();
            }
        });
    }

    private void modificarUsuario() {
        // Lógica para modificar el usuario
        _usuariosController.modificarUsuario(this);
    }

    private void borrarUsuario() {
        int confirm = JOptionPane.showConfirmDialog(this, "¿Está seguro de que desea eliminar este usuario?", "Confirmación", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            _usuariosController.borrarUsuario(usuario.getIdUsuario());
            JOptionPane.showMessageDialog(this, "Usuario eliminado.");
            dispose();  // Cerrar la ventana después de eliminar
        }
    }
}

